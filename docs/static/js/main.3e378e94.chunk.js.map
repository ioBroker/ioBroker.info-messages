{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ICON_MAPPING","bolt","BoldIcon","SunIcon","ban","BanIcon","ExclamationIcon","App","props","state","requesting","json","error","screenWidth","window","innerWidth","expanded","updateWindowDimensions","bind","readJson","fetch","then","data","sort","a","b","created","setState","addEventListener","this","removeEventListener","item","id","Icon","ExpansionPanel","includes","onChange","pos","indexOf","push","splice","ExpansionPanelSummary","className","classes","class","expandIcon","icon","emptyIcon","Typography","heading","substring","secondaryHeading","title","en","IconButton","size","buttonDelete","buttonEdit","ExpansionPanelDetails","details","itemTitle","content","repo","root","AppBar","position","Toolbar","editorDiv","map","renderOneNews","Component","withStyles","theme","width","height","overflow","severity_danger","background","severity_warning","severity_info","summary","summaryLine","display","marginRight","spacing","verticalAlign","fontWeight","right","top","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mbAmFMA,EAAe,CACjBC,KAAMC,IACN,QAASC,IACTC,IAAKC,IACL,uBAAwBC,KAGtBC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAY,EACZC,KAAM,GACNC,OAAO,EACPC,YAAaC,OAAOC,WACpBC,SAAU,IAGd,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAE9B,EAAKC,WAZU,E,uDAeP,IAAD,OACPC,MAAM,sFACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKX,UAClBU,MAAK,SAAAV,GACFA,EAAKY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,QAAUD,EAAEC,SAAW,EAAKF,EAAEE,QAAUD,EAAEC,QAAU,EAAI,KAC9E,EAAKC,SAAS,CAAEhB,c,0CAKxBG,OAAOc,iBAAiB,SAAUC,KAAKZ,4B,6CAIvCH,OAAOgB,oBAAoB,SAAUD,KAAKZ,0B,+CAI1CY,KAAKF,SAAS,CAACd,YAAaC,OAAOC,e,oCAGzBgB,GAAO,IAAD,OACVC,EAAKD,EAAKC,GACVC,EAAOjC,EAAa+B,EAAK,YAE/B,OAAO,kBAACG,EAAA,EAAD,CACHlB,SAAWa,KAAKpB,MAAMO,SAASmB,SAASH,GACxCI,SAAU,WACV,IAAMpB,EAAQ,YAAO,EAAKP,MAAMO,UAC1BqB,EAAMrB,EAASsB,QAAQN,IAChB,IAATK,EACArB,EAASuB,KAAKP,GAEdhB,EAASwB,OAAOH,EAAK,GAEzB,EAAKV,SAAS,CAAEX,eAEhB,kBAACyB,EAAA,EAAD,CACIC,UAAYb,KAAKrB,MAAMmC,QAAQ,YAAcZ,EAAKa,OAElDC,WAAY,kBAAC,IAAD,OAEVZ,EAAO,kBAACA,EAAD,CAAMS,UAAYb,KAAKrB,MAAMmC,QAAQG,OAAW,yBAAKJ,UAAYb,KAAKrB,MAAMmC,QAAQI,YAC7F,kBAACC,EAAA,EAAD,CAAYN,UAAYb,KAAKrB,MAAMmC,QAAQM,SAAYlB,EAAKL,QAAQwB,UAAU,EAAG,IAAjF,KAA0FlB,EAA1F,KACA,kBAACgB,EAAA,EAAD,CAAYN,UAAYb,KAAKrB,MAAMmC,QAAQQ,kBAA3C,IAAiEpB,EAAKqB,MAAMC,IAC5E,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQb,UAAYb,KAAKrB,MAAMmC,QAAQa,cAAe,kBAAC,IAAD,OACvE,kBAACF,EAAA,EAAD,CAAYC,KAAK,QAAQb,UAAYb,KAAKrB,MAAMmC,QAAQc,YAAa,kBAAC,IAAD,QAEzE,kBAACC,EAAA,EAAD,KACI,2BAAOhB,UAAYb,KAAKrB,MAAMmC,QAAQgB,SAClC,4BAAI,wBAAIjB,UAAYb,KAAKrB,MAAMmC,QAAQiB,WAAnC,aAA6D,4BAAM7B,EAAK8B,QAAQR,KACpF,4BAAI,wBAAIX,UAAYb,KAAKrB,MAAMmC,QAAQiB,WAAnC,UAA0D,4BAAM7B,EAAK,kBACzE,4BAAI,wBAAIW,UAAYb,KAAKrB,MAAMmC,QAAQiB,WAAnC,UAA0D,4BAAM7B,EAAK+B,Y,+BAM/E,IAAD,OACL,OAAO,yBAAKpB,UAAYb,KAAKrB,MAAMmC,QAAQoB,MACvC,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,sCAGR,yBAAKxB,UAAYb,KAAKrB,MAAMmC,QAAQwB,WAsB9BtC,KAAKpB,MAAME,KAAKyD,KAAI,SAAArC,GAAI,OAAI,EAAKsC,cAActC,Y,GAvG/CuC,aA6GHC,eA/KA,SAAAC,GAAK,MAAK,CACrBT,KAAM,CACFU,MAAO,OACPC,OAAQ,OACRC,SAAU,UAEdR,UAAW,CACPM,MAAO,OACPC,OAAQ,oBACRC,SAAU,QAEdC,gBAAiB,CACbX,SAAU,WACVY,WAAY,OAEhBC,iBAAkB,CACdb,SAAU,WACVY,WAAY,UAEhBE,cAAe,CACXd,SAAU,WACVY,WAAY,aAEhBG,QAAS,GAETC,YAAa,CACTC,QAAS,SAEbpC,KAAM,CACFqC,YAAaX,EAAMY,QAAQ,GAC3BX,MAAO,IAEX1B,UAAW,CACPoC,YAAaX,EAAMY,QAAQ,GAC3BX,MAAO,GACPC,OAAQ,GACRQ,QAAS,gBAEbvB,QAAS,CACL0B,cAAe,MACf,OAAQ,CACJA,cAAe,QAGvBzB,UAAW,CACP0B,WAAY,QAEhB9B,aAAc,CACVS,SAAU,WACVsB,MAAO,GACPC,IAAKhB,EAAMY,QAAQ,IAEvB3B,WAAY,CACRQ,SAAU,WACVsB,MAAO,GAAUf,EAAMY,QAAQ,GAC/BI,IAAKhB,EAAMY,QAAQ,OAwHZb,CAAmBhE,GC3LdkF,QACW,cAA7B3E,OAAO4E,SAASC,UAEe,UAA7B7E,OAAO4E,SAASC,UAEhB7E,OAAO4E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,MAAK,SAAA+E,GACjCA,EAAaC,kB","file":"static/js/main.3e378e94.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport './App.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AceEditor from 'react-ace';\r\n\r\nimport 'brace/mode/json';\r\nimport 'brace/theme/tomorrow_night_blue';\r\n\r\n// icons\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport IconDelete from '@material-ui/icons/Delete';\r\nimport IconEdit from '@material-ui/icons/Edit';\r\nimport {FaBold as BoldIcon} from 'react-icons/all';\r\nimport {FaBan as BanIcon} from 'react-icons/all';\r\nimport {FaExclamationTriangle as ExclamationIcon} from 'react-icons/all';\r\nimport {FaSun as SunIcon} from 'react-icons/all';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    editorDiv: {\r\n        width: '100%',\r\n        height: 'calc(100% - 64px)',\r\n        overflow: 'auto'\r\n    },\r\n    severity_danger: {\r\n        position: 'relative',\r\n        background: 'red',\r\n    },\r\n    severity_warning: {\r\n        position: 'relative',\r\n        background: 'yellow',\r\n    },\r\n    severity_info: {\r\n        position: 'relative',\r\n        background: 'lightblue',\r\n    },\r\n    summary: {\r\n    },\r\n    summaryLine: {\r\n        display: 'block',\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(1),\r\n        width: 32,\r\n    },\r\n    emptyIcon: {\r\n        marginRight: theme.spacing(1),\r\n        width: 32,\r\n        height: 32,\r\n        display: 'inline-block'\r\n    },\r\n    details: {\r\n        verticalAlign: 'top',\r\n        '& td': {\r\n            verticalAlign: 'top',\r\n        }\r\n    },\r\n    itemTitle: {\r\n        fontWeight: 'bold',\r\n    },\r\n    buttonDelete: {\r\n        position: 'absolute',\r\n        right: 56,\r\n        top: theme.spacing(1),\r\n    },\r\n    buttonEdit: {\r\n        position: 'absolute',\r\n        right: 56 + 32 + theme.spacing(1),\r\n        top: theme.spacing(1),\r\n    }\r\n});\r\n\r\nconst ICON_MAPPING = {\r\n    bolt: BoldIcon,\r\n    'sun-o': SunIcon,\r\n    ban: BanIcon,\r\n    'exclamation-triangle': ExclamationIcon,\r\n};\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            requesting: false,\r\n            json: [],\r\n            error: false,\r\n            screenWidth: window.innerWidth,\r\n            expanded: [],\r\n        };\r\n\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n\r\n        this.readJson();\r\n    }\r\n\r\n    readJson() {\r\n        fetch('https://raw.githubusercontent.com/ioBroker/ioBroker.info-messages/master/news.json')\r\n            .then(data => data.json())\r\n            .then(json => {\r\n                json.sort((a, b) => a.created > b.created ? -1 : (a.created < b.created ? 1 : 0));\r\n                this.setState({ json })\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.updateWindowDimensions());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions)\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({screenWidth: window.innerWidth});\r\n    }\r\n\r\n    renderOneNews(item) {\r\n        const id = item.id;\r\n        const Icon = ICON_MAPPING[item['fa-icon']];\r\n\r\n        return <ExpansionPanel\r\n            expanded={ this.state.expanded.includes(id)}\r\n            onChange={() => {\r\n            const expanded = [...this.state.expanded];\r\n            const pos = expanded.indexOf(id);\r\n            if (pos === -1) {\r\n                expanded.push(id);\r\n            } else {\r\n                expanded.splice(pos, 1);\r\n            }\r\n            this.setState({ expanded });\r\n        }}>\r\n            <ExpansionPanelSummary\r\n                className={ this.props.classes['severity_' + item.class]}\r\n\r\n                expandIcon={<ExpandMoreIcon />}\r\n            >\r\n                { Icon ? <Icon className={ this.props.classes.icon }/> : <div className={ this.props.classes.emptyIcon }/> }\r\n                <Typography className={ this.props.classes.heading }>{ item.created.substring(0, 10) } [{ id }]</Typography>\r\n                <Typography className={ this.props.classes.secondaryHeading }> { item.title.en }</Typography>\r\n                <IconButton size=\"small\" className={ this.props.classes.buttonDelete }><IconDelete/></IconButton>\r\n                <IconButton size=\"small\" className={ this.props.classes.buttonEdit }><IconEdit/></IconButton>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <table className={ this.props.classes.details }>\r\n                    <tr><td className={ this.props.classes.itemTitle }>Content: </td><td>{ item.content.en }</td></tr>\r\n                    <tr><td className={ this.props.classes.itemTitle }>Node: </td><td>{ item['node-version']  }</td></tr>\r\n                    <tr><td className={ this.props.classes.itemTitle }>Repo: </td><td>{ item.repo }</td></tr>\r\n                </table>\r\n            </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    }\r\n\r\n    render() {\r\n        return <div className={ this.props.classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <h5>News</h5>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={ this.props.classes.editorDiv}>\r\n                {/*<AceEditor\r\n                    height=\"100%\"\r\n                    width=\"100%\"\r\n                    mode=\"json\"\r\n                    value={ this.state.json }\r\n                    theme=\"tomorrow_night_blue\"\r\n                    onChange={ newValue => {\r\n                        let error = false;\r\n                        try {\r\n                            JSON.parse(newValue)\r\n                        } catch (e) {\r\n                            error = true;\r\n                        }\r\n                        this.setState({json: newValue, error});\r\n                    }}\r\n                    setOptions={{\r\n                        enableBasicAutocompletion: true,\r\n                    }}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    editorProps={{ $blockScrolling: true }}\r\n                />*/}\r\n                { this.state.json.map(item => this.renderOneNews(item)) }\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}